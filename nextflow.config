// config variable precedence: CLI args -> nextflow.config -> main.nf

// ~~~~~ EXTERNAL CONFIGS ~~~~~ //
params.externalConfigFile = "config.json"
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
String externalConfigContents = new File("${params.externalConfigFile}").text
def externalConfig = jsonSlurper.parseText(externalConfigContents)
params.externalConfig = externalConfig
params.syncServer = externalConfig.syncServer
params.MCITdir = externalConfig.MCITdir
params.BigPurpleDataNode = externalConfig.BigPurpleDataNode
params.productionDir = externalConfig.productionDir
params.productionDirNGS50 = externalConfig.productionDirNGS50


// ~~~~~ INTERNAL CONFIGS ~~~~~ //
import java.text.SimpleDateFormat
Date now = new Date()
SimpleDateFormat timestamp_fmt = new SimpleDateFormat("yyyy-MM-dd_HH-mm-ss")
def timestamp = timestamp_fmt.format(now)
def username = System.getProperty("user.name")
String hostname = java.net.InetAddress.getLocalHost().getHostName();


// default configs; overwritten by CLI args
params.logSubDir = "${timestamp}"
params.logDir = "logs/${params.logSubDir}"
params.logDir = new File("logs/${params.logSubDir}").getCanonicalPath()
params.username = username
params.hostname = hostname
params.emailHost = "nyumc.org"
params.emailFrom = "${username}@${params.emailHost}"
params.emailTo = "${username}@${params.emailHost}"
params.sendEmail = true
params.lockFile = ".lock"
params.workflowLabel = "lyz-nf"

manifest {
    author = 'Stephen Kelly'
    homePage = 'https://github.com/NYU-Molecular-Pathology/lyz-nf'
    description = 'Lab Monitor Program'
    mainScript = 'main.nf'
}

report {
    file = "${params.logDir}/nextflow-report.html"
}

trace {
    fields = "task_id,hash,native_id,process,tag,name,status,exit,module,container,cpus,time,disk,memory,attempt,submit,start,complete,duration,realtime,queue,%cpu,%mem,rss,vmem,peak_rss,peak_vmem,rchar,wchar,syscr,syscw,read_bytes,write_bytes"
    raw = true
    file = "${params.logDir}/trace.txt"
}

timeline {
    file = "${params.logDir}/timeline-report.html"
}


notification {
    to = "${params.emailTo}"
    from = "${params.emailFrom}"
}

process.beforeScript = 'TIMESTART=\$(date +%s); TIMESTART_STR="\$(date +"%Y-%m-%d %H:%M:%S")"; printf "USER:\${USER:-none} HOSTNAME:\${HOSTNAME:-none} PWD:\$PWD TIMESTART_STR:\$TIMESTART_STR\n";'
process.afterScript = 'printf "TIMEFINISH: %s" "\$(date +"%Y-%m-%d %H:%M:%S")" ; printf "elapsed time: %s\n" \$((\$(date +%s) - \${TIMESTART:-0}))'

profiles {
    standard { // default
        process.executor = 'local'
        executor.queueSize = 1
    }

    phoenix { // for use with NYUMC phoenix HPC system
        process.executor = 'sge'
    }

    bigpurple { // for use with NYUMC Big Purple HPC
        process.beforeScript = ". /etc/profile.d/modules.sh; ${process.beforeScript}"
        executor.queueSize = 1
        params.syncServer = params.BigPurpleDataNode
    }
}
